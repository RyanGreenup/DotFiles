#+TITLE: My Emacs Config

* Design Decisions
** Package Manager
I was considering:

- [[https://github.com/jwiegley/use-package#installing-use-package][use-package]]
  - Very Modular
- [[https://github.com/purcell/emacs.d/blob/master/lisp/init-elpa.el][The Standard Package.el with magic lisp]]
  - No External Dependencies
  - Doesn't load from GitHub though
- [[https://github.com/raxod502/straight.el#install-packages][Straight]]
- Bash Scripts / AUR / Pacman
  - This would require more configuring though

I went with straight because it can load from MELPA or GitHub and it
integrates with use-package.

** Listing Packages
Should I:

- Load the package in each =.el= file or
0 all together in one file?

I opted for all together in one file, that way it's easier to comment them
out, straight [[https://github.com/raxod502/straight.el#how-do-i-uninstall-a-package][only loads]] what's mentioned so this seems really convenient

** Org Extensions
   Using =elp= it seems that =superstar-mode= adds about 0.04 seconds of
   work in loading the org-agenda, this isn't insignificant, but it's
   sufficiently low to justify the trade off.

** Startup Time
   Wrapping things in =(add-hook 'after-init-hook (lambda () ...))=
   isn't helpful because the user is still stuck waiting, this can be
   seen by the following example:

   1. define the following in your =init.el=

      #+begin_src elisp
	(evil-mode)
	(evil-define-key 'normal 'global (kbd "p") 'print-time-delta)

	    (defun print-time-delta ()
	    (interactive)
		(message
		    (format "Responding to User input!; Init Time:\n---> %s\n Final Startup Time (post after-init-hook):\n---> %s\n"
			(float-time
			    (time-subtract after-init-time before-init-time))
			(float-time
			    (time-subtract (current-time) before-init-time))
		    )
		)
	    )
      #+end_src

   2. startup emacs and immediately press p, this will report when user input is interpreted.


   It shows that wrapping things in an =after-init= hook isn't useful.
     

    

* TODO Org Mode
  
** Agenda

* TODO Winner Mode

* TODO Create a Deferred loading =.el=

* Outshine Mode
 
* Configure Garbage Collection
  - [ ] Is it garbage collecting at startup?
  - [ ] Is it garbage collecting during swoop or during loading org?
  - [ ] Garbage colect at idle?


* Installation Time
    < 2 minutes for a fresh install on fast internet



* Issues
** Helm
1. open `emacs -Q`
2. Paste in the following lisp to install helm and ESS:
    ```
    ;; Set up straight

    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (straight-use-package 'helm) 
    (straight-use-package 'ess) 

    ;; (add-hook 'after-init-hook (lambda () (helm-mode 1)(message "Enabled Helm Mode")))

    ```

3. Evaluate the LISP with `M-x eval-buffer`
4. Open an R file with `C-x C-f /tmp/file.R`
5. Attempt to start an inferior process with `C-c C-z`
  1. Emacs should report `helm-internal: Wrong type argument: window-live-p, nil`
6. Disable helm-mode with `M-x helm-mode`
8. Attempt to start an inferior process with `C-c C-z` and it should work
